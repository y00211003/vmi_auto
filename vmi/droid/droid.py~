#
#

from vmi.server.server import Server
from vmi.server.user import User

from vmi.configure import Configure

import inspect
import datetime
from time import sleep

from appium import webdriver
from appium.webdriver.common.touch_action import TouchAction
from appium.webdriver.common.multi_action import MultiAction

from functools import partial
from vmi.utility.logger import Logger


log = Logger(__name__)

SCREEN_WIDTH = 480
SCREEN_HEIGHT= 800
PADDING = 10


class Android( object ):

    def __init__(self):
        super(Android, self).__init__()
        self.config = Configure.Instance()
        config = self.config

        self.desired_caps = {'platformName' : 'Android', 'platformVersion' : '4.4',
                             'deviceName' :'4.4',
                             'app' : config.get('DroidAutoClient', 'android_app'),
                             'newCommandTimeout': 600
        }



class Droid(object):

    def __init__(self):
        #super(Droid, self).__init()
        self.config = Configure.Instance()

        config = self.config

        self.remote_hub = 'http://' + config.get('DroidAutoClient','ip') +\
                          ':' + config.get('DroidAutoClient', 'port') + \
                          '/wd/hub'

        self.driver = None

    def __del__(self):

        if None != self.driver:
            self.driver.quit()
            self.driver = None

    def _invoke_device(self, device):
        if self.driver == None:
            self.driver = webdriver.Remote(self.remote_hub, device.desired_caps)
        else:
            pass

    def _click_button_at_index (self,  index ):

        buttons = self.driver.find_elements_by_class_name('android.widget.Button')
        buttons[index].click()
        sleep(2)


    def check_is_in_activity( self, activity_name):
        if self.driver == None:
            raise ValueError ('No driver')

        current_activity = self.driver.current_activity

        if current_activity.find(activity_name) != -1:
            return True
        else:
            return False

    def _wait_for_activity_with_timeout(self, activity_name, secs , interval = 5):

        s = 0

        if self.check_is_in_activity(activity_name): return

        sleep(interval)

        while not self.check_is_in_activity(activity_name) :
            s+=5
            if s > secs : raise ValueError('Failed to wait activity ' +  activity_name)
            sleep(interval)


    def click_remember_password(self, device ):

        self._invoke_device(device)
        self._wait_for_activity_with_timeout('LoginAccountActivity', 10)

        checkboxs = self.driver.find_elements_by_class_name('android.widget.CheckBox')
        try:
            checkboxs[0].click()
        except Exception as e:
            raise ValueError ('Fail to set remember password')


    def _input_edit_text_at_index_with_content(self, index, content):

        if self.driver == None:
            raise ValueError ('No driver')

        text_fields = self.driver.find_elements_by_class_name('android.widget.EditText')

        text_fields[index].send_keys(content)


    def input_server_address_and_get_config(self, ip ):

        self._wait_for_activity_with_timeout('LoginServerActivity', 10)
        self._input_edit_text_at_index_with_content(0, ip)
        self._click_button_at_index(0)


    def input_user_name (self, username):

        self._wait_for_activity_with_timeout('LoginAccountActivity', 10)
        self._input_edit_text_at_index_with_content(0, username)



    def input_password_and_login(self, password):

        self._wait_for_activity_with_timeout('LoginAccountActivity', 10)
        self._input_edit_text_at_index_with_content(1, password)

        self._click_button_at_index(0)


    def unlock_unia_with_password(self, password):
        self._wait_for_activity_with_timeout('PasswordUnlockActivity', 10)
        self._input_edit_text_at_index_with_content(0, password)
        self.press_enter_key()

    def unlock_unia_with_pin (self, pin):
        self._wait_for_activity_with_timeout('PasswordUnlockActivity', 10)
        self._input_edit_text_at_index_with_content(0, pin)
        self.press_enter_key()


    def _perform_press_keycode(self, keycode):
        if self.driver == None: raise ValueError ('No driver')
        self.driver.press_keycode(keycode)

    def _perform_long_press_keycode(self, keycode):
        if self.driver == None: raise ValueError('No driver')
        self.driver.long_press_keycode(keycode)

    def press_enter_key (self):
        self._perform_press_keycode(66)

    def press_menu_key (self):
        self._perform_press_keycode(82)

    def press_home_key (self):
        self._perform_press_keycode(3)

    def press_back_key(self):
        self._perform_press_keycode(4)

    def perform_click(self, x, y):
        if self.driver == None : raise ValueError('No driver')
        self.driver.tap([(x,y)])

    def launch_app (self):
        if self.driver == None: raise ValueError('No driver')
        self.driver.launch_app()

    # navigate from hybrid to local launcher

    def navigate_to_launcher(self):

        if self.check_is_in_activity('HybridActivity'): self.press_back_key()
        self._wait_for_activity_with_timeout('PagedLauncher', 10)


class DroidAPI(Droid):

    def __init__(self):
        super(DroidAPI, self).__init__()


    #Call before anyother API
    def invoke_device(self, device):

        self._invoke_device(device)

    def reinvoke_device(self, device):
        if not self.driver == None:
            self.driver.quit()
            self.driver = None
        self._invoke_device(device)


    def login_server_with_remember_password(self, server, user):

        self.input_server_address_and_get_config(server.portal_ip)
        self.input_user_name(user.username)
        self.click_remember_password()
        self.input_password_and_login(user.password)

    def login_server_without_remember_password(self, server, user):

        self.input_server_address_and_get_config(server.portal_ip)
        self.input_user_name(user.username)
        self.input_password_and_login(user.password)

    def login_server_without_input_server_address(self, server, user):
        self.input_user_name(user.username)
        self.input_password_and_login(user.password)


    def set_unia_lock_screen_none( self , user ):

        self._wait_for_activity_with_timeout('ChooseLockGeneric', 10)
        self._click_button_at_index(0)

        self._wait_for_activity_with_timeout('PagedLauncher', 10)

    def set_unia_lock_screen_pin(self, user):

        self._wait_for_activity_with_timeout('ChooseLockGeneric', 10)
        self._click_button_at_index(2)

        self._wait_for_activity_with_timeout('ChooseLockPassword', 10)

        if user.screen_lock_type == 3:
            self._input_edit_text_at_index_with_content(0,user.screen_lock_value)
            self._click_button_at_index(1)
            self._input_edit_text_at_index_with_content(0,user.screen_lock_value)
            self._click_button_at_index(1)

        else:
            raise ValueError('invalid user setting')

        self._wait_for_activity_with_timeout('PagedLauncher', 10)

    def set_unia_lock_screen_password(self, user):

        self._wait_for_activity_with_timeout('ChooseLockGeneric', 10)
        self._click_button_at_index(3)

        self._wait_for_activity_with_timeout('ChooseLockPassword', 10)

        if user.screen_lock_type == 4:
            self._input_edit_text_at_index_with_content(0,user.screen_lock_value)
            self._click_button_at_index(1)
            self._input_edit_text_at_index_with_content(0,user.screen_lock_value)
            self._click_button_at_index(1)

        else:
            raise ValueError('invalid user setting')

        self._wait_for_activity_with_timeout('PagedLauncher', 10)


    def signout_from_launcher(self):
        if self.check_is_in_activity('HybridActivity'):
            self.navigate_to_launcher()
        self._wait_for_activity_with_timeout('PagedLauncher', 10)
        self.press_menu_key()
        self.driver.find_elements_by_class_name('android.widget.Button')[0].click()
        self._click_button_at_index(1)


    def confirm_spn(self, choice= False):
        #self._wait_for_activity_with_timeout('LoginServerActivity', 150)
        pass

    def expected_current_activity(self, activity_name):

        self._wait_for_activity_with_timeout(activity_name, 10)

    def launch_app_from_unia(self, app_name):
        pass
